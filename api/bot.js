const { Telegraf } = require('telegraf');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const TARGET_USER_ID = parseInt(process.env.TARGET_USER_ID); // ID –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞
const GROUP_CHAT_ID = process.env.GGROUP_CHAT_ID; // ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã

// –°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–ª—è –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç–∏)
const WARNING_MESSAGES = [
    `‚ö†Ô∏è Automated Alert [Code: SPAM-042]\nYour message was automatically removed for spamming behavior.`,
    `‚ö†Ô∏è Automated Alert [Code: FLOOD-128]\nRapid-fire messages detected. Message deleted.`,
    `‚ö†Ô∏è Automated Alert [Code: CONTENT-311]\nMessage removed for violating platform guidelines.`,
    `‚ö†Ô∏è Automated Alert [Code: ABUSE-076]\nFrequent message editing detected. This is considered platform abuse.`
];

const bot = new Telegraf(BOT_TOKEN);

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ (–≤–∫–ª—é—á–∞—Ç—å/–≤—ã–∫–ª—é—á–∞—Ç—å)
let isActive = false;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
async function sendWarning(ctx, targetMessageId) {
    const randomMessage = WARNING_MESSAGES[Math.floor(Math.random() * WARNING_MESSAGES.length)];
    
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å reply –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–≥ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è)
        const warningMsg = await ctx.reply(randomMessage, {
            reply_to_message_id: targetMessageId,
            disable_notification: true
        });
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
        setTimeout(async () => {
            try {
                await ctx.deleteMessage(warningMsg.message_id);
            } catch (e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            }
        }, 5000);
        
    } catch (error) {
        console.log('Warning message error:', error.message);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.on('message', async (ctx) => {
    if (!isActive) return;
    
    const message = ctx.message;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ
    if (message.from.id === TARGET_USER_ID && message.chat.id.toString() === GROUP_CHAT_ID) {
        try {
            // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            await sendWarning(ctx, message.message_id);
            
            // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            setTimeout(async () => {
                try {
                    await ctx.deleteMessage(message.message_id);
                } catch (deleteError) {
                    console.log('Delete message error:', deleteError.message);
                }
            }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 1 —Å–µ–∫—É–Ω–¥—É
            
        } catch (error) {
            console.log('Error processing message:', error.message);
        }
    }
});

// –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º
bot.command('on', async (ctx) => {
    if (ctx.chat.type === 'private') {
        isActive = true;
        await ctx.reply('üü¢ Auto-moderation ACTIVATED. Target user messages will be deleted with warnings.');
    }
});

bot.command('off', async (ctx) => {
    if (ctx.chat.type === 'private') {
        isActive = false;
        await ctx.reply('üî¥ Auto-moderation DEACTIVATED.');
    }
});

// –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
bot.command('status', async (ctx) => {
    if (ctx.chat.type === 'private') {
        await ctx.reply(`Status: ${isActive ? 'üü¢ ACTIVE' : 'üî¥ INACTIVE'}`);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Vercel
module.exports = async (req, res) => {
    if (req.method === 'POST') {
        try {
            await bot.handleUpdate(req.body);
            res.status(200).send('OK');
        } catch (error) {
            console.error('Error handling update:', error);
            res.status(500).send('Error');
        }
    } else {
        res.status(200).send('Telegram Bot is running on Vercel');
    }
};

// –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if (process.env.NODE_ENV === 'development') {
    bot.launch();
    console.log('Bot is running in development mode');
}
