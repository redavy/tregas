import { Telegraf } from 'telegraf';
// I FOUND IT HARD TO FIND
// –•–∞—Ä–¥–∫–æ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const BOT_TOKEN = '7862907987:AAEW81nxnF1_D8OfvhfJ70mpBa5bqoC8EDg';
const TARGET_USER_ID = 6705882256;
const GROUP_CHAT_ID = '-1002712293369';

const bot = new Telegraf(BOT_TOKEN);
let isActive = false;

// –°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ (4 –≤–∞—Ä–∏–∞–Ω—Ç–∞)
const WARNING_MESSAGES = [
    `‚ö†Ô∏è Automated Alert [Code: SPAM-042]\nYour message was automatically removed for spamming behavior.`,
    `‚ö†Ô∏è Automated Alert [Code: FLOOD-128]\nRapid-fire messages detected. Message deleted.`,
    `‚ö†Ô∏è Automated Alert [Code: CONTENT-311]\nMessage removed for violating platform guidelines.`,
    `‚ö†Ô∏è Automated Alert [Code: ABUSE-076]\nFrequent message editing detected. This is considered platform abuse.`
];

// –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
bot.command('on', (ctx) => {
    if (ctx.chat.type === 'private') {
        isActive = true;
        ctx.reply('üü¢ Auto-moderation ACTIVATED. Target user messages will be deleted with warnings.');
    }
});

bot.command('off', (ctx) => {
    if (ctx.chat.type === 'private') {
        isActive = false;
        ctx.reply('üî¥ Auto-moderation DEACTIVATED.');
    }
});

bot.command('status', (ctx) => {
    if (ctx.chat.type === 'private') {
        ctx.reply(`Status: ${isActive ? 'üü¢ ACTIVE' : ' üî¥ INACTIVE'}`);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (ctx) => {
    if (!isActive) return;

    const message = ctx.message;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø–µ
    if (message.from.id === TARGET_USER_ID && message.chat.id.toString() === GROUP_CHAT_ID) {
        try {
            // –°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ 4 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            const randomMessage = WARNING_MESSAGES[Math.floor(Math.random() * WARNING_MESSAGES.length)];

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å reply (—ç—Ç–æ —Å–æ–∑–¥–∞—Å—Ç "—Ç–µ–≥" –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è)
            const warningMsg = await ctx.reply(randomMessage, {
                reply_to_message_id: message.message_id,
                disable_notification: true
            });

            // –£–¥–∞–ª—è–µ–º –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            setTimeout(async () => {
                try {
                    await ctx.deleteMessage(message.message_id);
                } catch (deleteError) {
                    console.log('Delete message error:', deleteError.message);
                }
            }, 1000);

            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
            setTimeout(async () => {
                try {
                    await ctx.deleteMessage(warningMsg.message_id);
                } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                }
            }, 5000);

        } catch (error) {
            console.log('Error processing message:', error.message);
        }
    }
});

// –í–µ–±—Ö—É–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
export default async (req, res) => {
    if (req.method === 'POST') {
        try {
            await bot.handleUpdate(req.body);
            res.status(200).send('OK');
        } catch (error) {
            console.error('Webhook error:', error.message);
            res.status(200).send('OK'); // –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º 200 –¥–ª—è Telegram
        }
    } else {
        res.status(200).json({
            status: 'Bot is running',
            active: isActive
        });
    }
};
