import { Telegraf } from 'telegraf';

// –•–∞—Ä–¥–∫–æ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const BOT_TOKEN = '7862907987:AAEW81nxnF1_D8OfvhfJ70mpBa5bqoC8EDg';
const TARGET_USER_ID = 6705882256;
const GROUP_CHAT_ID = '-1002712293369';

const bot = new Telegraf(BOT_TOKEN);
let isActive = false;

// –°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ (4 –≤–∞—Ä–∏–∞–Ω—Ç–∞)
const WARNING_MESSAGES = [
    `‚ö†Ô∏è Automated Alert [Code: SPAM-042]\nYour message was automatically removed for spamming behavior.\nPlease read the rules /help`,
    `‚ö†Ô∏è Automated Alert [Code: FLOOD-128]\nRapid-fire messages detected. Message deleted.\nPlease read the rules /help`,
    `‚ö†Ô∏è Automated Alert [Code: CONTENT-311]\nMessage removed for violating platform guidelines.\nPlease read the rules /help`,
    `‚ö†Ô∏è Automated Alert [Code: ABUSE-076]\nFrequent message editing detected. This is considered platform abuse.\nPlease read the rules /help`
];

// –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help
const WORDS_LIST = [
    "–ì–æ–≤–Ω–æ,", "–∑–∞–ª—É–ø–∞,", "–ø–µ–Ω–∏—Å,", "—Ö–µ—Ä,", "–¥–∞–≤–∞–ª–∫–∞,", "—Ö—É–π,", "–±–ª—è–¥–∏–Ω–∞",
    "–ì–æ–ª–æ–≤–∫–∞,", "—à–ª—é—Ö–∞,", "–∂–æ–ø–∞,", "—á–ª–µ–Ω,", "–µ–±–ª–∞–Ω,", "–ø–µ—Ç—É—Ö‚Ä¶", "–ú—É–¥–∏–ª–∞",
    "–†—É–∫–æ–±–ª—É–¥,", "—Å—Å–∞–Ω–∏–Ω–∞,", "–æ—á–∫–æ,", "–±–ª—è–¥—É–Ω,", "–≤–∞–≥–∏–Ω–∞",
    "–°—É–∫–∞,", "–µ–±–ª–∞–Ω–∏—â–µ,", "–≤–ª–∞–≥–∞–ª–∏—â–µ,", "–ø–µ—Ä–¥—É–Ω,", "–¥—Ä–æ—á–∏–ª–∞",
    "–ü–∏–¥–æ—Ä,", "–ø–∏–∑–¥–∞,", "—Ç—É–∑,", "–º–∞–ª–∞—Ñ—å—è",
    "–ì–æ–º–∏–∫,", "–º—É–¥–∏–ª–∞,", "–ø–∏–ª–æ—Ç–∫–∞,", "–º–∞–Ω–¥–∞",
    "–ê–Ω—É—Å,", "–≤–∞–≥–∏–Ω–∞,", "–ø—É—Ç–∞–Ω–∞,", "–ø–µ–¥—Ä–∏–ª–∞",
    "–®–∞–ª–∞–≤–∞,", "—Ö—É–∏–ª–æ,", "–º–æ—à–æ–Ω–∫–∞,", "–µ–ª–¥–∞"
];

// –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
const chatStates = new Map();

// –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
bot.command('on', (ctx) => {
    if (ctx.chat.type === 'private') {
        isActive = true;
        ctx.reply('üü¢ Auto-moderation ACTIVATED. Target user messages will be deleted with warnings.');
    }
});

bot.command('off', (ctx) => {
    if (ctx.chat.type === 'private') {
        isActive = false;
        ctx.reply('üî¥ Auto-moderation DEACTIVATED.');
    }
});

bot.command('status', (ctx) => {
    if (ctx.chat.type === 'private') {
        ctx.reply(`Status: ${isActive ? 'üü¢ ACTIVE' : 'üî¥ INACTIVE'}`);
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.command('help', async (ctx) => {
    const chatId = ctx.chat.id;
    
    // –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç —Å–ø–∞–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    if (chatStates.has(chatId)) {
        chatStates.delete(chatId);
        return;
    }
    
    // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∞–º
    const state = {
        index: 0,
        lastSent: Date.now()
    };
    chatStates.set(chatId, state);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
    if (state.index < WORDS_LIST.length) {
        await ctx.reply(WORDS_LIST[state.index]);
        state.index++;
        state.lastSent = Date.now();
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    state.ctx = ctx;
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å–ø–∞–º–∞
bot.on('message', async (ctx) => {
    const chatId = ctx.chat.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å–ø–∞–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ
    if (chatStates.has(chatId)) {
        const state = chatStates.get(chatId);
        const now = Date.now();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–∞ –ª–∏ —Ö–æ—Ç—è –±—ã 1 —Å–µ–∫—É–Ω–¥–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (now - state.lastSent >= 1000 && state.index < WORDS_LIST.length) {
            await ctx.reply(WORDS_LIST[state.index]);
            state.index++;
            state.lastSent = now;
            
            // –ï—Å–ª–∏ —Å–ª–æ–≤–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∞–º
            if (state.index >= WORDS_LIST.length) {
                chatStates.delete(chatId);
            }
        }
    }
    
    // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    if (!isActive) return;

    const message = ctx.message;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø–µ
    if (message.from.id === TARGET_USER_ID && message.chat.id.toString() === GROUP_CHAT_ID) {
        try {
            // –°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ 4 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            const randomMessage = WARNING_MESSAGES[Math.floor(Math.random() * WARNING_MESSAGES.length)];

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å reply
            const warningMsg = await ctx.reply(randomMessage, {
                reply_to_message_id: message.message_id,
                disable_notification: true
            });

            // –£–¥–∞–ª—è–µ–º –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            setTimeout(async () => {
                try {
                    await ctx.deleteMessage(message.message_id);
                } catch (deleteError) {
                    console.log('Delete message error:', deleteError.message);
                }
            }, 1000);

            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(async () => {
                try {
                    await ctx.deleteMessage(warningMsg.message_id);
                } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                }
            }, 5000);

        } catch (error) {
            console.log('Error processing message:', error.message);
        }
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–ø–∞–º–∞
bot.command('stop', (ctx) => {
    const chatId = ctx.chat.id;
    if (chatStates.has(chatId)) {
        chatStates.delete(chatId);
    }
});

// –í–µ–±—Ö—É–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
export default async (req, res) => {
    if (req.method === 'POST') {
        try {
            await bot.handleUpdate(req.body);
            res.status(200).send('OK');
        } catch (error) {
            console.error('Webhook error:', error.message);
            res.status(200).send('OK');
        }
    } else {
        res.status(200).json({
            status: 'Bot is running',
            active: isActive
        });
    }
};
